// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/kgrams.h"
#include <Rcpp.h>

using namespace Rcpp;

// find_cpp
LogicalVector find_cpp(XPtr<Dictionary> xptr, CharacterVector words);
RcppExport SEXP _kgrams_find_cpp(SEXP xptrSEXP, SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Dictionary> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_cpp(xptr, words));
    return rcpp_result_gen;
END_RCPP
}
// length_kgrams_dictionary
size_t length_kgrams_dictionary(XPtr<Dictionary> xptr);
RcppExport SEXP _kgrams_length_kgrams_dictionary(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Dictionary> >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(length_kgrams_dictionary(xptr));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_kgramFreqs();

static const R_CallMethodDef CallEntries[] = {
    {"_kgrams_find_cpp", (DL_FUNC) &_kgrams_find_cpp, 2},
    {"_kgrams_length_kgrams_dictionary", (DL_FUNC) &_kgrams_length_kgrams_dictionary, 1},
    {"_rcpp_module_boot_kgramFreqs", (DL_FUNC) &_rcpp_module_boot_kgramFreqs, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_kgrams(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
